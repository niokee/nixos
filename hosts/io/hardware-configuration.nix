# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{lib, ...}: {
  imports = [];

  boot.initrd.availableKernelModules = ["virtio_pci"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];

  fileSystems."/lib/modules/5.15.167.4-microsoft-standard-WSL2" = {
    device = "none";
    fsType = "overlay";
  };

  fileSystems."/mnt/wsl" = {
    device = "none";
    fsType = "tmpfs";
  };

  fileSystems."/mnt/wsl/docker-desktop/shared-sockets/guest-services" = {
    device = "none";
    fsType = "tmpfs";
  };

  fileSystems."/mnt/wsl/docker-desktop/shared-sockets/host-services" = {
    device = "/mnt/wsl/docker-desktop/shared-sockets/guest-services/host-services";
    fsType = "none";
    options = ["bind"];
  };

  fileSystems."/usr/lib/wsl/drivers" = {
    device = "drivers";
    fsType = "9p";
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/2a5f5ba5-b520-4a26-a2be-9f4ef996549a";
    fsType = "ext4";
  };

  fileSystems."/mnt/wslg" = {
    device = "none";
    fsType = "tmpfs";
  };

  # fileSystems."/mnt/wslg/distro" =
  #   { device = "";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  fileSystems."/usr/lib/wsl/lib" = {
    device = "none";
    fsType = "overlay";
  };

  fileSystems."/tmp/.X11-unix" = {
    device = "/mnt/wslg/.X11-unix";
    fsType = "none";
    options = ["bind"];
  };

  fileSystems."/mnt/wslg/doc" = {
    device = "none";
    fsType = "overlay";
  };

  fileSystems."/Docker/host" = {
    device = "C:\134Program Files\134Docker\134Docker\134resources";
    fsType = "9p";
  };

  fileSystems."/mnt/wsl/docker-desktop/cli-tools" = {
    device = "/mnt/docker-desktop-disk/isocache/entries/docker-wsl-cli.iso/5fc6944de23d3c30e4a7bd42dac7d6d12e421b827b916363cfe7bf8dfdf6f85c";
    fsType = "iso9660";
    options = ["loop"];
  };

  fileSystems."/mnt/c" = {
    device = "C:\134";
    fsType = "9p";
  };

  fileSystems."/mnt/d" = {
    device = "D:\134";
    fsType = "9p";
  };

  fileSystems."/mnt/e" = {
    device = "E:\134";
    fsType = "9p";
  };

  fileSystems."/mnt/f" = {
    device = "F:\134";
    fsType = "9p";
  };

  fileSystems."/mnt/wsl/PHYSICALDRIVE4" = {
    device = "/dev/disk/by-uuid/bde8ebed-8bd3-4c64-8c90-16c0ee363c00";
    fsType = "ext4";
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/21d08131-b697-49ae-8657-a3653de130a0";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.eth0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
